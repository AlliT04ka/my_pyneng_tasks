# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
user_input = input('Input net/mask: ')
net_mask = user_input.split('/')
host = list(map(lambda x: int(x), net_mask[0].split('.')))
string_net = '{:08b}{:08b}{:08b}{:08b}'.format(host[0], host[1], host[2], host[3])
string_net = string_net[:int(net_mask[1])] + "0"*(32 - int(net_mask[1]))
net = []
for i in range(0, 32, 8):
    net.append(int(string_net[i:i + 8], 2))
string_mask = '1' *  int(net_mask[1]) + '0' * (32-int(net_mask[1]))
mask = []
for i in range(0, 32, 8):
    mask.append(int(string_mask[i:i + 8], 2))
print('Network:')
print('{:<10}{:<10}{:<10}{:<10}'.format(net[0], net[1], net[2], net[3]))
print('{:08b}  {:08b}  {:08b}  {:08b}'.format(net[0], net[1], net[2], net[3]))
print('\nMask:\n/' + net_mask[1])
print('{:<10}{:<10}{:<10}{:<10}'.format(mask[0], mask[1], mask[2], mask[3]))
print('{:08b}  {:08b}  {:08b}  {:08b}'.format(mask[0], mask[1], mask[2], mask[3]))
